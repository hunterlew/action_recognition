import torch.nn as nn
import torch.nn.functional as F
import torch.nn.init as init


# define net
class c2d_alexnet(nn.Module):
    def __init__(self):
        super(c2d_alexnet, self).__init__()
        self.conv1 = nn.Conv2d(3, 96, kernel_size=11, stride=4, padding=0)
        self.conv2 = nn.Conv2d(96, 256, kernel_size=5, stride=1, padding=2)
        self.conv3 = nn.Conv2d(256, 384, kernel_size=3, stride=1, padding=1)
        self.conv4 = nn.Conv2d(384, 384, kernel_size=3, stride=1, padding=1)
        self.conv5 = nn.Conv2d(384, 256, kernel_size=3, stride=1, padding=1)
        self.fc1 = nn.Linear(9216, 2048)  # 6*6*256 = 9216
        self.fc2 = nn.Linear(2048, 2048)
        self.fc3 = nn.Linear(2048, 50)
        self.conv1_bn = nn.BatchNorm2d(96)
        self.conv2_bn = nn.BatchNorm2d(256)
        self.conv3_bn = nn.BatchNorm2d(384)
        self.conv4_bn = nn.BatchNorm2d(384)
        self.conv5_bn = nn.BatchNorm2d(256)
        self.fc1_bn = nn.BatchNorm1d(2048)
        self.fc2_bn = nn.BatchNorm1d(2048)

    def forward(self, x):
        x = F.relu(self.conv1_bn(self.conv1(x)))
        x = F.max_pool2d(x, 3, stride=2)
        # print(x.shape)
        x = F.relu(self.conv2_bn(self.conv2(x)))
        x = F.max_pool2d(x, 3, stride=2)
        # print(x.shape)
        x = F.relu(self.conv3_bn(self.conv3(x)))
        x = F.relu(self.conv4_bn(self.conv4(x)))
        x = F.relu(self.conv5_bn(self.conv5(x)))
        x = F.max_pool2d(x, 3, stride=2)
        # print(x.shape)

        x = x.view(-1, 9216)
        x = F.relu(self.fc1_bn(self.fc1(x)))
        x = F.dropout(x, p=0.5)
        # print(x.shape)
        x = F.relu(self.fc2_bn(self.fc2(x)))
        x = F.dropout(x, p=0.5)
        # print(x.shape)
        x = self.fc3(x)
        # print(x.shape)
        return F.log_softmax(x)


class c2d_vgg19(nn.Module):
    def __init__(self):
        super(c2d_vgg19, self).__init__()
        self.conv1_a = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1)
        self.conv1_b = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1)
        self.conv2_a = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.conv2_b = nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1)
        self.conv3_a = nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1)
        self.conv3_b = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.conv3_c = nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.conv4_a = nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1)
        self.conv4_b = nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.conv4_c = nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.conv5_a = nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.conv5_b = nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.conv5_c = nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.fc1 = nn.Linear(12544, 2048)  # 7*7*512 = 25088
        self.fc2 = nn.Linear(2048, 2048)
        self.fc3 = nn.Linear(2048, 50)
        self.conv1_a_bn = nn.BatchNorm2d(64)
        self.conv1_b_bn = nn.BatchNorm2d(64)
        self.conv2_a_bn = nn.BatchNorm2d(128)
        self.conv2_b_bn = nn.BatchNorm2d(128)
        self.conv3_a_bn = nn.BatchNorm2d(256)
        self.conv3_b_bn = nn.BatchNorm2d(256)
        self.conv3_c_bn = nn.BatchNorm2d(256)
        self.conv4_a_bn = nn.BatchNorm2d(512)
        self.conv4_b_bn = nn.BatchNorm2d(512)
        self.conv4_c_bn = nn.BatchNorm2d(512)
        self.conv5_a_bn = nn.BatchNorm2d(512)
        self.conv5_b_bn = nn.BatchNorm2d(512)
        self.conv5_c_bn = nn.BatchNorm2d(512)
        self.fc1_bn = nn.BatchNorm1d(2048)
        self.fc2_bn = nn.BatchNorm1d(2048)

    def forward(self, x):
        x = F.relu(self.conv1_a_bn(self.conv1_a(x)))
        x = F.relu(self.conv1_b_bn(self.conv1_b(x)))
        x = F.max_pool2d(x, 2)
        # print(x.shape)
        x = F.relu(self.conv2_a_bn(self.conv2_a(x)))
        x = F.relu(self.conv2_b_bn(self.conv2_b(x)))
        x = F.max_pool2d(x, 2)
        # print(x.shape)
        x = F.relu(self.conv3_a_bn(self.conv3_a(x)))
        x = F.relu(self.conv3_b_bn(self.conv3_b(x)))
        x = F.relu(self.conv3_c_bn(self.conv3_c(x)))
        x = F.max_pool2d(x, 2)
        # print(x.shape)
        x = F.relu(self.conv4_a_bn(self.conv4_a(x)))
        x = F.relu(self.conv4_b_bn(self.conv4_b(x)))
        x = F.relu(self.conv4_c_bn(self.conv4_c(x)))
        x = F.max_pool2d(x, 2)
        # print(x.shape)
        x = F.relu(self.conv5_a_bn(self.conv5_a(x)))
        x = F.relu(self.conv5_b_bn(self.conv5_b(x)))
        x = F.relu(self.conv5_c_bn(self.conv5_c(x)))
        x = F.max_pool2d(x, 2)
        # print(x.shape)

        x = x.view(-1, 25088)
        x = F.relu(self.fc1_bn(self.fc1(x)))
        x = F.dropout(x, p=0.5)
        # print(x.shape)
        x = F.relu(self.fc2_bn(self.fc2(x)))
        x = F.dropout(x, p=0.5)
        # print(x.shape)
        x = self.fc3(x)
        # print(x.shape)
        return F.log_softmax(x)
